// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azcarot/GopherMarketProject/internal/storage (interfaces: PgxStorage)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	storage "github.com/Azcarot/GopherMarketProject/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockPgxStorage is a mock of PgxStorage interface.
type MockPgxStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPgxStorageMockRecorder
}

// MockPgxStorageMockRecorder is the mock recorder for MockPgxStorage.
type MockPgxStorageMockRecorder struct {
	mock *MockPgxStorage
}

// NewMockPgxStorage creates a new mock instance.
func NewMockPgxStorage(ctrl *gomock.Controller) *MockPgxStorage {
	mock := &MockPgxStorage{ctrl: ctrl}
	mock.recorder = &MockPgxStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxStorage) EXPECT() *MockPgxStorageMockRecorder {
	return m.recorder
}

// AddBalanceToUser mocks base method.
func (m *MockPgxStorage) AddBalanceToUser(arg0 storage.OrderData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalanceToUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBalanceToUser indicates an expected call of AddBalanceToUser.
func (mr *MockPgxStorageMockRecorder) AddBalanceToUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalanceToUser", reflect.TypeOf((*MockPgxStorage)(nil).AddBalanceToUser), arg0)
}

// CheckIfOrderExists mocks base method.
func (m *MockPgxStorage) CheckIfOrderExists(arg0 context.Context, arg1 storage.OrderData) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfOrderExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckIfOrderExists indicates an expected call of CheckIfOrderExists.
func (mr *MockPgxStorageMockRecorder) CheckIfOrderExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfOrderExists", reflect.TypeOf((*MockPgxStorage)(nil).CheckIfOrderExists), arg0, arg1)
}

// CheckUserExists mocks base method.
func (m *MockPgxStorage) CheckUserExists(arg0 storage.UserData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockPgxStorageMockRecorder) CheckUserExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockPgxStorage)(nil).CheckUserExists), arg0)
}

// CheckUserPassword mocks base method.
func (m *MockPgxStorage) CheckUserPassword(arg0 context.Context, arg1 storage.UserData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPassword indicates an expected call of CheckUserPassword.
func (mr *MockPgxStorageMockRecorder) CheckUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPassword", reflect.TypeOf((*MockPgxStorage)(nil).CheckUserPassword), arg0, arg1)
}

// CreateNewOrder mocks base method.
func (m *MockPgxStorage) CreateNewOrder(arg0 context.Context, arg1 storage.OrderData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewOrder indicates an expected call of CreateNewOrder.
func (mr *MockPgxStorageMockRecorder) CreateNewOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewOrder", reflect.TypeOf((*MockPgxStorage)(nil).CreateNewOrder), arg0, arg1)
}

// CreateNewUser mocks base method.
func (m *MockPgxStorage) CreateNewUser(arg0 context.Context, arg1 storage.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockPgxStorageMockRecorder) CreateNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockPgxStorage)(nil).CreateNewUser), arg0, arg1)
}

// CreateTablesForGopherStore mocks base method.
func (m *MockPgxStorage) CreateTablesForGopherStore() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTablesForGopherStore")
}

// CreateTablesForGopherStore indicates an expected call of CreateTablesForGopherStore.
func (mr *MockPgxStorageMockRecorder) CreateTablesForGopherStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTablesForGopherStore", reflect.TypeOf((*MockPgxStorage)(nil).CreateTablesForGopherStore))
}

// GetCustomerOrders mocks base method.
func (m *MockPgxStorage) GetCustomerOrders(arg0 context.Context) ([]storage.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerOrders", arg0)
	ret0, _ := ret[0].([]storage.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerOrders indicates an expected call of GetCustomerOrders.
func (mr *MockPgxStorageMockRecorder) GetCustomerOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerOrders", reflect.TypeOf((*MockPgxStorage)(nil).GetCustomerOrders), arg0)
}

// GetUnfinishedOrders mocks base method.
func (m *MockPgxStorage) GetUnfinishedOrders() ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfinishedOrders")
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfinishedOrders indicates an expected call of GetUnfinishedOrders.
func (mr *MockPgxStorageMockRecorder) GetUnfinishedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfinishedOrders", reflect.TypeOf((*MockPgxStorage)(nil).GetUnfinishedOrders))
}

// GetUserBalance mocks base method.
func (m *MockPgxStorage) GetUserBalance(arg0 context.Context, arg1 storage.UserData) (storage.BalanceResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(storage.BalanceResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockPgxStorageMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockPgxStorage)(nil).GetUserBalance), arg0, arg1)
}

// GetWithdrawals mocks base method.
func (m *MockPgxStorage) GetWithdrawals(arg0 context.Context) ([]storage.WithdrawResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0)
	ret0, _ := ret[0].([]storage.WithdrawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockPgxStorageMockRecorder) GetWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockPgxStorage)(nil).GetWithdrawals), arg0)
}

// UpdateOrder mocks base method.
func (m *MockPgxStorage) UpdateOrder(arg0 context.Context, arg1 storage.OrderData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockPgxStorageMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockPgxStorage)(nil).UpdateOrder), arg0, arg1)
}

// WithdrawFromUser mocks base method.
func (m *MockPgxStorage) WithdrawFromUser(arg0 context.Context, arg1 storage.WithdrawRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromUser indicates an expected call of WithdrawFromUser.
func (mr *MockPgxStorageMockRecorder) WithdrawFromUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromUser", reflect.TypeOf((*MockPgxStorage)(nil).WithdrawFromUser), arg0, arg1)
}
